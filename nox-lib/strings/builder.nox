import "std:libc"
import "std:memory"

/**
* Represents a string builder.
*/
public struct Builder {
  private buffer: [dynamic]byte, // The buffer that is used by the string builder.
}

/**
* Makes a new string builder.
*
* @param allocator The allocator to be used by the string builder.
* @return The new string builder.
*/
public proc builder_make(allocator: Allocator = context.allocator) -> Builder {
  return {array_make!(byte)(0, DYNAMIC_ARRAY_DEFAULT_CAPACITY, allocator)};
}

implement Builder {

  /**
  * Writes a single byte to the builder.
  *
  * @param b The byte to write.
  */
  public proc write_byte(b: byte) {
    array_add(&self.buffer, b);
  }

  /**
  * Writes a single character to the builder.
  *
  * @param c The character to write.
  */
  public proc write_char(c: char) {
    utf8, length := char_to_utf8(c);
    for (i := 0; i < length; i++) {
      array_add(&self.buffer, utf8[i]);
    }
  }

  /**
  * Writes an uint to the builder.
  *
  * @param u The uint to write.
  */
  public proc write_uint(u: uint) {
    buffer: [32]byte;

    base: uint = 10;
    index := length(buffer);
    char_digits_pointer := cast(*byte) data(CHAR_DIGITS);

    n := u;
    for (n > base) {
      index--;
      digit_offset: ^uint*byte = n % base;
      c := char_digits_pointer[digit_offset];
      buffer[index] = c;
      n /= base;
    }

    index--;
    digit_offset: ^uint*byte = n % base;
    c := char_digits_pointer[digit_offset];
    buffer[index] = c;

    for (i := index; i < length(buffer); i++) {
      self.write_byte(buffer[i]);
    }
  }

  /**
  * Writes a string to the builder.
  *
  * @param s The string to write.
  */
  public proc write_string(str: string) {
    byte_data := cast(*byte) data(str);
    for (i := 0; i < length(str); i++) {
      offset: ^*byte = i;
      array_add(&self.buffer, byte_data[offset]);
    }
  }

  /**
  * Writes a formatted string to the builder.
  * 
  * @param format The formatted string.
  * @param args   The format arguments.
  */
  public proc write_format(format: string, params args: []any) {
    // This assumes ASCII for now...
    format_begin_pointer := cast(*byte) data(format);
    last_index := 0;
    argument_index := 0;

    for (i := 0; i < length(format); i++) {
      offset: ^*byte = i;
      character := cast(char) format_begin_pointer[offset];
      if (character == '%') {
        // If we get another '%' we don't print an argument but instead print a single '%'.
        print_percentage := false;
        if (i + 1 < length(format)) {
          offset = i + 1;
          next_character := cast(char) format_begin_pointer[offset];
          if (next_character == '%') {
            print_percentage = true;
          }
        }
        
        // Print the string that came before the '%'.
        length_of_previous_string := i - last_index;
        self.write_string(format[last_index:last_index + length_of_previous_string]);

        // Instead of '%' print the argument (if provided).
        if (print_percentage) {
          self.write_string("%");
          i++; // We want to skip the next character in the loop.
        } else if (argument_index >= length(args)) {
          self.write_string("%%!(MISSING ARGUMENT)!");
        } else {
          self.write_any(args[argument_index++]);
        }

        // We offset by one so that the '%' gets excluded.
        last_index = i + 1;
      }
    }

    // We ignore any arguments that get additionally passed in.

    // Print the reset of the string that does not contain any '%'.
    length_of_previous_string := length(format) - last_index;
    self.write_string(format[last_index:last_index + length_of_previous_string]);
  }

  /**
  * Writes an any to the builder.
  * 
  * @param a The any to write.
  */
  public proc write_any(a: any) {
    #if (NOX_RTTR_DISABLED) {
      self.write_string("RTTR DISABLED");
    } else {
      id := typeid_of(a);
      info := type_info_of(id);
      value_pointer := data(a);
      if (value_pointer == null) {
        self.write_string("EMPTY ANY");
      } else {
        self.write_type_info(info, value_pointer);
      }
    }
  }

  /**
  * Writes a value with a corresponding type info.
  *
  * @param info          The type info of the value.
  * @param value_pointer A pointer to the value to write.
  */
  public proc write_type_info(info: *Type_Info, value_pointer: rawptr) {
    switch (info.kind) {
      case .Invalid: self.write_string("INVALID TYPE");
      
      case .Void: self.write_string("void");
      case .Boolean: {
        if (*cast(*bool) value_pointer) {
          self.write_string("true");
        } else {
          self.write_string("false");
        }
      }
      case .Integer: {
        if (info.variant.(Type_Info_Integer).is_signed) {
          switch (info.size) {
            case 1: self.write_formatted_value("%hhd", *cast(*i8)  value_pointer);
            case 2: self.write_formatted_value("%hd",  *cast(*i16) value_pointer);
            case 4: self.write_formatted_value("%d",   *cast(*i32) value_pointer);
            case 8: self.write_formatted_value("%lld", *cast(*i64) value_pointer);
          }
        } else {
          switch (info.size) {
            case 1: self.write_formatted_value("%hhu", *cast(*u8)  value_pointer);
            case 2: self.write_formatted_value("%hu",  *cast(*u16) value_pointer);
            case 4: self.write_formatted_value("%u",   *cast(*u32) value_pointer);
            case 8: self.write_formatted_value("%llu", *cast(*u64) value_pointer);
          }
        }
      }
      case .Float: {
        switch (info.size) {
          case 4: self.write_formatted_value("%.3f", cast(f64) *cast(*f32) value_pointer);
          case 8: self.write_formatted_value("%.3f", *cast(*f64) value_pointer);
        }
      }
      case .Char: {
        character := *cast(*char) value_pointer;
        string_data, byte_size := char_to_utf8(character);
        for (i := 0; i < byte_size; i++) {
          self.write_byte(string_data[i]);
        }
      }
      case .Enumeration: {
        info_enumeration := info.variant.(Type_Info_Enumeration);
        value: int;
        if (info.variant.(Type_Info_Integer).is_signed) {
          switch (info.size) {
            case 1: value = cast(int) *cast(*i8)  value_pointer;
            case 2: value = cast(int) *cast(*i16) value_pointer;
            case 4: value = cast(int) *cast(*i32) value_pointer;
            case 8: value = cast(int) *cast(*i64) value_pointer;
          }
        } else {
          switch (info.size) {
            case 1: value = cast(int) *cast(*u8)  value_pointer;
            case 2: value = cast(int) *cast(*u16) value_pointer;
            case 4: value = cast(int) *cast(*u32) value_pointer;
            case 8: value = cast(int) *cast(*u64) value_pointer;
          }
        }

        if (info_enumeration.is_flags) {
          first_item := true;
          for (i := 0; i < length(info_enumeration.values); i++) {
            item_value := info_enumeration.values[i];
            if (value & item_value == item_value) {
              if (first_item) {
                first_item = false;
              } else {
                self.write_string(" | ");
              }
              self.write_string(info_enumeration.names[i]);
            }
          }

          if (first_item) {
            self.write_formatted_value("%lld", value);
          }
        } else {
          index := -1;
          for (i := 0; i < length(info_enumeration.values); i++) {
            if (info_enumeration.values[i] == value) {
              index = i;
              break;
            }
          }

          if (index >= 0) {
            self.write_string(info_enumeration.names[index]);
          } else {
            self.write_formatted_value("%lld", value);
          }
        }
      }
      case .String: {
        if (info.variant.(Type_Info_String).is_cstring) {
          cstring_value := *cast(*cstring) value_pointer;
          if (cstring_value == null) {
            self.write_string("null");
          } else {
            self.write_formatted_value("%s", cstring_value);
          }
        } else {
          string_value := *cast(*string) value_pointer;
          string_data := data(string_value);
          if (string_data == null) {
            self.write_string("null");
          } else {
            self.write_string(string_value);
          }
        }
      }
      case .Pointer, .Routine: {
        #if (NOX_OS == .Windows) {
          self.write_formatted_value("0x%p", *cast(*rawptr) value_pointer);
        } else {
          self.write_formatted_value("%p", *cast(*rawptr) value_pointer);
        }
      }
      case .Relative_Pointer: {
        info_relative_pointer := info.variant.(Type_Info_Relative_Pointer);
        relative_base := info_relative_pointer.relative_base;
        relative_base_size := relative_base.size;
        if (relative_base.variant.(Type_Info_Integer).is_signed) {
          switch (relative_base_size) {
            case 1: self.write_formatted_value("%hhd", *cast(*i8)  value_pointer);
            case 2: self.write_formatted_value("%hd",  *cast(*i16) value_pointer);
            case 4: self.write_formatted_value("%d",   *cast(*i32) value_pointer);
            case 8: self.write_formatted_value("%lld", *cast(*i64) value_pointer);
          }
        } else {
          switch (relative_base_size) {
            case 1: self.write_formatted_value("%hhu", *cast(*u8)  value_pointer);
            case 2: self.write_formatted_value("%hu",  *cast(*u16) value_pointer);
            case 4: self.write_formatted_value("%u",   *cast(*u32) value_pointer);
            case 8: self.write_formatted_value("%llu", *cast(*u64) value_pointer);
          }
        }
      }
      case .Array: {
        info_array := info.variant.(Type_Info_Array);
        base_type := info_array.base;
        byte_value_pointer := cast(*byte) value_pointer;

        if (info_array.layout_modifier == .None) {
          self.write_string("{");
          for (i := 0; i < info_array.number_of_elements; i++) {
            offset: ^uint*byte = cast(uint) i * base_type.size;
            element_pointer := byte_value_pointer + offset;
            self.write_type_info(base_type, element_pointer);

            if (i < info_array.number_of_elements - 1) {
              self.write_string(", ");
            }
          }
          self.write_string("}");
        } else {
          if (info_array.layout_modifier == .SoA) {
            self.write_string("SoA ");
          } else if (info_array.layout_modifier == .AoSoA) {
            self.write_string("AoSoA ");
          }
          self.write_type_info(base_type, value_pointer);
        }
      }
      case .Dynamic_Array: {
        info_dynamic_array := info.variant.(Type_Info_Dynamic_Array);
        base_type := info_dynamic_array.base;
        dynamic_array_pointer := cast(*memory.Raw_Dynamic_Array) value_pointer;
        byte_value_pointer := cast(*byte) dynamic_array_pointer.data;

        if (info_dynamic_array.layout_modifier == .None) {
          self.write_string("{");
          for (i := 0; i < dynamic_array_pointer.length; i++) {
            offset: ^uint*byte = cast(uint) i * base_type.size;
            element_pointer := byte_value_pointer + offset;
            self.write_type_info(base_type, element_pointer);

            if (i < dynamic_array_pointer.length - 1) {
              self.write_string(", ");
            }
          }
          self.write_string("}");
        } else {
          if (info_dynamic_array.layout_modifier == .SoA) {
            self.write_string("SoA ");
          } else if (info_dynamic_array.layout_modifier == .AoSoA) {
            self.write_string("AoSoA ");
          }
          self.write_type_info(base_type, value_pointer);
        }
      }
      case .Slice: {
        info_slice := info.variant.(Type_Info_Slice);
        base_type := info_slice.base;
        slice_pointer := cast(*memory.Raw_Slice) value_pointer;
        byte_value_pointer := cast(*byte) slice_pointer.data;

        if (info_slice.layout_modifier == .None) {
          self.write_string("{");
          for (i := 0; i < slice_pointer.length; i++) {
            offset: ^uint*byte = cast(uint) i * base_type.size;
            element_pointer := byte_value_pointer + offset;
            self.write_type_info(base_type, element_pointer);

            if (i < slice_pointer.length - 1) {
              self.write_string(", ");
            }
          }
          self.write_string("}");
        } else {
          if (info_slice.layout_modifier == .SoA) {
            self.write_string("SoA ");
          } else if (info_slice.layout_modifier == .AoSoA) {
            self.write_string("AoSoA ");
          }
          self.write_type_info(base_type, value_pointer);
        }
      }
      case .Tuple: {
        info_tuple := info.variant.(Type_Info_Tuple);
        byte_value_pointer := cast(*byte) value_pointer;

        self.write_string("{");
        for (i := 0; i < length(info_tuple.types); i++) {
          element_type := info_tuple.types[i]; 
          offset: ^uint*byte = info_tuple.offsets[i];
          element_value_pointer := byte_value_pointer + offset;
          self.write_type_info(element_type, element_value_pointer);

          if (i < length(info_tuple.types) - 1) {
            self.write_string(", ");
          }
        }
        self.write_string("}");
      }
      case .Struct: {
        info_struct := info.variant.(Type_Info_Struct);
        byte_value_pointer := cast(*byte) value_pointer;

        self.write_string("{");
        for (i := 0; i < length(info_struct.types); i++) {
          self.write_string(info_struct.names[i]);
          self.write_string(": ");

          field_type := info_struct.types[i]; 

          offset: ^uint*byte = info_struct.offsets[i];
          field_value_pointer := byte_value_pointer + offset;
          self.write_type_info(field_type, field_value_pointer);

          if (i < length(info_struct.types) - 1) {
            self.write_string(", ");
          }
        }
        self.write_string("}");
      }
      case .Union: {
        info_union := info.variant.(Type_Info_Union);
        union_tag_pointer := cast(*int) value_pointer;

        union_tag := *cast(*int) value_pointer;
        if (union_tag == 0) {
          self.write_string("null");
        } else {
          for (i := 0; i < length(info_union.types); i++) {
            if (union_tag == i + 1) {
              union_variant_type := info_union.types[i];
              union_value_pointer_offset: ^*int = 1;
              union_value_pointer := union_tag_pointer + union_value_pointer_offset;
              self.write_type_info(union_variant_type, union_value_pointer);
            }
          } 
        }
      }
      case .Any: {
        a := *cast(*any) value_pointer;
        self.write_any(a);
      }
      case .Typeid: {
        self.write_formatted_value("%llu", *cast(*u64) value_pointer);
      }

      case: {
        self.write_string("UNSUPPORTED TYPE: ");
        self.write_string(info.name);
      }
    }
  }

  /**
  * Converts the builder to a string whose lifetime is bound to the builder.
  *
  * @return The builder converted to a string.
  */
  public func to_string() -> string {
    raw_string: memory.Raw_String = {data(self.buffer), length(self.buffer)};
    return *cast(*string) &raw_string;
  }

  /**
  * Reserves space for the builder.
  *
  * @param size The size to reserve.
  */
  public proc reserve(size: int) {
    array_reserve(&self.buffer, size);
  }

  /**
  * Destroys the resources of the builder.
  */
  public proc destroy() {
    array_destroy(&self.buffer);
  }

  /**
  * Writes a formatted value to the builder.
  * 
  * @param !T     The type of the value.
  * @param format The format of the value.
  * @param value  The value to write.
  */
  private proc write_formatted_value!(T)(format: cstring, value: T) {
    format_length := cast(int) libc.snprintf(null, 0, format, value) + 1; // We have to include room for the null terminator.
    buffer_length := length(self.buffer);
    new_buffer_size := buffer_length + format_length;
    array_resize(&self.buffer, new_buffer_size);
    buffer_data := cast(*byte) data(self.buffer);
    buffer_offset: ^*byte = buffer_length;
    libc.snprintf(cast(cstring) (buffer_data + buffer_offset), cast(uint) format_length, format, value);
    array_resize(&self.buffer, new_buffer_size - 1); // Remove the null terminator that got written.
  }

}

private global CHAR_DIGITS := "0123456789";
