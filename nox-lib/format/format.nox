import "std:libc"
import "std:memory"
import "std:strings"

/**
* Prints a given string to the console.
*/
public proc print(s: string) {
  libc.printf("%.*s", length(s), data(s));
}

/**
* Prints a formatted string to the console.
* 
* @param format The formatted string.
* @param args   The format arguments.
*/
public proc printf(format: string, params args: []any) {
  // This assumes ASCII for now...
  format_begin_pointer := cast(*byte) data(format);
  last_index := 0;
  last_format_pointer := format_begin_pointer;
  argument_index := 0;

  for (i := 0; i < length(format); i++) {
    offset: ^*byte = i;
    character := cast(char) format_begin_pointer[offset];
    if (character == '%') {
      // If we get another '%' we don't print an argument but instead print a single '%'.
      print_percentage := false;
      print_explicit := false;
      if (i + 1 < length(format)) {
        offset = i + 1;
        next_character := cast(char) format_begin_pointer[offset];
        if (next_character == '%') {
          print_percentage = true;
        } else if (next_character == 'v') {
          print_explicit = true;
        }
      }

      // Print the string that came before the '%'.
      length_of_previous_string := i - last_index;
      libc.printf("%.*s", length_of_previous_string, last_format_pointer);

      // Instead of '%' print the argument (if provided).
      if (print_percentage) {
        libc.printf("%%");
      } else if (argument_index >= length(args)) {
        libc.printf("%%!(MISSING ARGUMENT)!");
      } else {
        print_any(args[argument_index++]);
      }

      if (print_percentage || print_explicit) {
        i++; // We want to skip the next character in the loop.
      }

      // We offset by one so that the '%' (or both '%') gets excluded.
      format_offset: ^*byte = i + 1;
      last_index = i + 1;
      last_format_pointer = format_begin_pointer + format_offset;
    }
  }

  // We ignore any arguments that get additionally passed in.

  // Print the reset of the string that does not contain any '%'.
  length_of_previous_string := length(format) - last_index;
  libc.printf("%.*s", length_of_previous_string, last_format_pointer);
}

/**
* Prints an any to the console.
* 
* @param a The any to print.
*/
public proc print_any(a: any) {
  #if (NOX_RTTR_DISABLED) {
    libc.printf("RTTR DISABLED");
  } else {
    id := typeid_of(a);
    info := type_info_of(id);
    value_pointer := data(a);
    if (value_pointer == null) {
      libc.printf("EMPTY ANY");
    } else {
      print_info(info, value_pointer);
    }
  }
}

/**
* Print a value with a corresponding type info.
* 
* @param info          The type info of the value.
* @param value_pointer A pointer to the value to print.
*/
private proc print_info(info: *Type_Info, value_pointer: rawptr) {
  switch (info.kind) {
    case .Invalid: libc.printf("INVALID TYPE");
    
    case .Void: libc.printf("void");
    case .Boolean: {
      if (*cast(*bool) value_pointer) {
        libc.printf("true");
      } else {
        libc.printf("false");
      }
    }
    case .Integer: {
      if (info.variant.(Type_Info_Integer).is_signed) {
        switch (info.size) {
          case 1: libc.printf("%hhd", *cast(*i8)  value_pointer);
          case 2: libc.printf("%hd",  *cast(*i16) value_pointer);
          case 4: libc.printf("%d",   *cast(*i32) value_pointer);
          case 8: libc.printf("%lld", *cast(*i64) value_pointer);
        }
      } else {
        switch (info.size) {
          case 1: libc.printf("%hhu", *cast(*u8)  value_pointer);
          case 2: libc.printf("%hu",  *cast(*u16) value_pointer);
          case 4: libc.printf("%u",   *cast(*u32) value_pointer);
          case 8: libc.printf("%llu", *cast(*u64) value_pointer);
        }
      }
    }
    case .Float: {
      switch (info.size) {
        case 4: libc.printf("%.3f", cast(f64) *cast(*f32) value_pointer);
        case 8: libc.printf("%.3f", *cast(*f64) value_pointer);
      }
    }
    case .Char: {
      character := *cast(*char) value_pointer;
      string_data, byte_size := strings.char_to_utf8(character);
      libc.printf("%.*s", byte_size, data(string_data));
    }
    case .Enumeration: {
      info_enumeration := info.variant.(Type_Info_Enumeration);
      value: int;
      if (info.variant.(Type_Info_Integer).is_signed) {
        switch (info.size) {
          case 1: value = cast(int) *cast(*i8)  value_pointer;
          case 2: value = cast(int) *cast(*i16) value_pointer;
          case 4: value = cast(int) *cast(*i32) value_pointer;
          case 8: value = cast(int) *cast(*i64) value_pointer;
        }
      } else {
        switch (info.size) {
          case 1: value = cast(int) *cast(*u8)  value_pointer;
          case 2: value = cast(int) *cast(*u16) value_pointer;
          case 4: value = cast(int) *cast(*u32) value_pointer;
          case 8: value = cast(int) *cast(*u64) value_pointer;
        }
      }

      if (info_enumeration.is_flags) {
        first_item := true;
        for (i := 0; i < length(info_enumeration.values); i++) {
          item_value := info_enumeration.values[i];
          if (value & item_value == item_value) {
            if (first_item) {
              first_item = false;
            } else {
              libc.printf(" | ");
            }

            libc.printf("%s", data(info_enumeration.names[i]));
          }
        }

        if (first_item) {
          libc.printf("%lld", value);
        }
      } else {
        index := -1;
        for (i := 0; i < length(info_enumeration.values); i++) {
          if (info_enumeration.values[i] == value) {
            index = i;
            break;
          }
        }

        if (index >= 0) {
          libc.printf("%s", data(info_enumeration.names[index]));
        } else {
          libc.printf("%lld", value);
        }
      }
    }
    case .String: {
      if (info.variant.(Type_Info_String).is_cstring) {
        cstring_value := *cast(*cstring) value_pointer;
        if (cstring_value == null) {
          libc.printf("null");
        } else {
          libc.printf("%s", cstring_value);
        }
      } else {
        string_value := *cast(*string) value_pointer;
        string_data := data(string_value);
        if (string_data == null) {
          libc.printf("null");
        } else {
          libc.printf("%.*s", length(string_value), string_data);
        }
      }
    }
    case .Pointer, .Routine: {
      #if (NOX_OS == .Windows) {
        libc.printf("0x%p", *cast(*rawptr) value_pointer);
      } else {
        libc.printf("%p", *cast(*rawptr) value_pointer);
      }
    }
    case .Relative_Pointer: {
      info_relative_pointer := info.variant.(Type_Info_Relative_Pointer);
      relative_base := info_relative_pointer.relative_base;
      relative_base_size := relative_base.size;
      if (relative_base.variant.(Type_Info_Integer).is_signed) {
        switch (relative_base_size) {
          case 1: libc.printf("%hhd", *cast(*i8)  value_pointer);
          case 2: libc.printf("%hd",  *cast(*i16) value_pointer);
          case 4: libc.printf("%d",   *cast(*i32) value_pointer);
          case 8: libc.printf("%lld", *cast(*i64) value_pointer);
        }
      } else {
        switch (relative_base_size) {
          case 1: libc.printf("%hhu", *cast(*u8)  value_pointer);
          case 2: libc.printf("%hu",  *cast(*u16) value_pointer);
          case 4: libc.printf("%u",   *cast(*u32) value_pointer);
          case 8: libc.printf("%llu", *cast(*u64) value_pointer);
        }
      }
    }
    case .Array: {
      info_array := info.variant.(Type_Info_Array);
      base_type := info_array.base;
      byte_value_pointer := cast(*byte) value_pointer;

      if (info_array.layout_modifier == .None) {
        libc.printf("{");
        for (i := 0; i < info_array.number_of_elements; i++) {
          offset: ^uint*byte = cast(uint) i * base_type.size;
          element_pointer := byte_value_pointer + offset;
          print_info(base_type, element_pointer);

          if (i < info_array.number_of_elements - 1) {
            libc.printf(", ");
          }
        }
        libc.printf("}");
      } else {
        if (info_array.layout_modifier == .SoA) {
          libc.printf("SoA ");
        } else if (info_array.layout_modifier == .AoSoA) {
          libc.printf("AoSoA ");
        }
        print_info(base_type, value_pointer);
      }
    }
    case .Dynamic_Array: {
      info_dynamic_array := info.variant.(Type_Info_Dynamic_Array);
      base_type := info_dynamic_array.base;
      dynamic_array_pointer := cast(*memory.Raw_Dynamic_Array) value_pointer;
      byte_value_pointer := cast(*byte) dynamic_array_pointer.data;

      if (info_dynamic_array.layout_modifier == .None) {
        libc.printf("{");
        for (i := 0; i < dynamic_array_pointer.length; i++) {
          offset: ^uint*byte = cast(uint) i * base_type.size;
          element_pointer := byte_value_pointer + offset;
          print_info(base_type, element_pointer);

          if (i < dynamic_array_pointer.length - 1) {
            libc.printf(", ");
          }
        }
        libc.printf("}");
      } else {
        if (info_dynamic_array.layout_modifier == .SoA) {
          libc.printf("SoA ");
        } else if (info_dynamic_array.layout_modifier == .AoSoA) {
          libc.printf("AoSoA ");
        }
        print_info(base_type, value_pointer);
      }
    }
    case .Slice: {
      info_slice := info.variant.(Type_Info_Slice);
      base_type := info_slice.base;
      slice_pointer := cast(*memory.Raw_Slice) value_pointer;
      byte_value_pointer := cast(*byte) slice_pointer.data;

      if (info_slice.layout_modifier == .None) {
        libc.printf("{");
        for (i := 0; i < slice_pointer.length; i++) {
          offset: ^uint*byte = cast(uint) i * base_type.size;
          element_pointer := byte_value_pointer + offset;
          print_info(base_type, element_pointer);

          if (i < slice_pointer.length - 1) {
            libc.printf(", ");
          }
        }
        libc.printf("}");
      } else {
        if (info_slice.layout_modifier == .SoA) {
          libc.printf("SoA ");
        } else if (info_slice.layout_modifier == .AoSoA) {
          libc.printf("AoSoA ");
        }
        print_info(base_type, value_pointer);
      }
    }
    case .Tuple: {
      info_tuple := info.variant.(Type_Info_Tuple);
      byte_value_pointer := cast(*byte) value_pointer;

      libc.printf("{");
      for (i := 0; i < length(info_tuple.types); i++) {
        element_type := info_tuple.types[i]; 
        offset: ^uint*byte = info_tuple.offsets[i];
        element_value_pointer := byte_value_pointer + offset;
        print_info(element_type, element_value_pointer);

        if (i < length(info_tuple.types) - 1) {
          libc.printf(", ");
        }
      }
      libc.printf("}");
    }
    case .Struct: {
      info_struct := info.variant.(Type_Info_Struct);
      byte_value_pointer := cast(*byte) value_pointer;

      libc.printf("{");
      for (i := 0; i < length(info_struct.types); i++) {
        libc.printf("%s: ", data(info_struct.names[i]));

        field_type := info_struct.types[i]; 

        offset: ^uint*byte = info_struct.offsets[i];
        field_value_pointer := byte_value_pointer + offset;
        print_info(field_type, field_value_pointer);

        if (i < length(info_struct.types) - 1) {
          libc.printf(", ");
        }
      }
      libc.printf("}");
    }
    case .Union: {
      info_union := info.variant.(Type_Info_Union);
      union_tag_pointer := cast(*int) value_pointer;

      union_tag := *cast(*int) value_pointer;
      if (union_tag == 0) {
        libc.printf("null");
      } else {
        for (i := 0; i < length(info_union.types); i++) {
          if (union_tag == i + 1) {
            union_variant_type := info_union.types[i];
            union_value_pointer_offset: ^*int = 1;
            union_value_pointer := union_tag_pointer + union_value_pointer_offset;
            print_info(union_variant_type, union_value_pointer);
          }
        } 
      }
    }
    case .Any: {
      a := *cast(*any) value_pointer;
      print_any(a);
    }
    case .Typeid: {
      libc.printf("%llu", *cast(*u64) value_pointer);
    }

    case: libc.printf("UNSUPPORTED TYPE: %s", info.name);
  }
}