/**
* Test the functionality of the control flow.
*/
internal proc test_control_flow() {
  assert(test_conditions() == 17);
  test_for_loops();
  test_for_loops_control();
  test_foeach_loop();
  assert(test_switch(6) == 90);
  assert(test_switch_nested(23) == 76);
  test_control_flow_nested();
  assert(test_control_flow_deep() == 1);
  test_early_return();
}

private proc test_conditions() -> i32 {
  if (true) {
    if (false) {
      i: i32 = 14;
      return i;
    } else if (true) {
      i: i32 = 17;
      return i;
    } else {
      i: i32 = 6;
      return i;
    }
  } else if (false) {
    return 20;
  } else {
    i: i32 = 18;
    return i;
  }
}

private proc test_for_loops() {
  endless_i := 0;
  for {
    endless_i += 1;
    break;
  }
  assert(endless_i == 1);

  condition_i := 0;
  for (false) {
    condition_i += 1;
  }
  assert(condition_i == 0);

  classic_i := 0;
  for (i := 0; i < 5; i++) {
    classic_i += 1;
  }
  assert(classic_i == 5);
}

private proc test_for_loops_control() {
  i := 3;
  j := 7;
  for {
    i += 1;
    for {
      j += 1;
      break;
    }
    break;
  }
  assert(i == 4);
  assert(j == 8);
}

private proc test_foeach_loop() {
  slice: []int = {0, 1, 2, 3};
  foreach (element, i in slice) {
    assert(element == i);
  }
}

private proc test_switch(arg: int) -> i32 {
  switch (arg) {
    case: return 0;
    case 0: return 8;
    case 5: return 2;
    case 6: return 90;
  }
}

private proc test_switch_nested(arg: int) -> i32 {
  switch (arg) {
    case: fallthrough;
    case 0: fallthrough;
    case 3, 4: {
      switch (arg) {
        case 87: break;
        case 23: return 76;
        case: fallthrough;
      }
    }
    case 5: return 2;
    case 6: return 90;
  }
  return 0;
}

private proc test_control_flow_nested() {
  test_variable := 0;
  second_test_variable := 0;

  for {
    switch (123) {
      case 123: {
        for (i := 0; i < 10; i++) {
          if (i > 5) {
            continue;
          } else if (i < 5) {
            continue;
          } else {
            second_test_variable += 2;
            break;
          }
          test_variable += 17;
        }
      }
    }
    second_test_variable += 2;
    break;
  }

  assert(test_variable == 0);
  assert(second_test_variable == 4);
}

private proc test_control_flow_deep() -> int {
  i := 0;
  for {
    if (true) {
      if (true) {
        if (true) {
          for (true) {
            i += 1;
            if (true) {
              return i;
            }
          }
        }
      }
    }
  }
  return i;
}

private proc test_early_return() {
  for {
    if (true) {
      for (i := 0; i < 10; i++) {
        if (i > 5) {
          return;
        }
      }
    }
  }

  assert(false);
}

