import "std:format"
import "std:io"
import "std:libc"
import "std:memory"
import "std:strings"
import "std:system"
import "std:thread"
import "std:time"

#if (NOX_OS == .Windows) {
  import "std:system/windows"
} 

/**
* Contains all the compilation arguments that can be set from the command line.
*/
internal struct Compilation_Arguments {
  name: string,               // The name of the package (or file) to compile.

  output_name: string,        // The name of the output file.
  optimization_level: int,    // The optimization level to apply (-1, 0, 1 or 2).
  generate_llvm_ir: bool,     // Should the LLVM IR (.ll) file be generated?
  keep_intermediate: bool,    // Should the intermediate object file (.obj or .o) be kept?
  build_debug: bool,          // Should debug information be generated? (Windows only)
  rttr_disabled: bool,        // Should RTTR be disabled? (Sets the 'NOX_RTTR_DISABLED' constant to true)
  assert_disabled: bool,      // Should the assert procedure be disabled? (Sets the 'NOX_ASSERT_DISABLED' constant to true)
  extra_linker_flags: string, // Extra arguments that are passed to the linker as is.

  verbose: bool,              // Should verbose logging be active?
  verbose_more_timings: bool, // Should more timings be displayed in verbose logging?
  run_tests: bool,            // Should the test-framework be run?
}

internal struct Profiler {
  global_stopwatch: time.Stopwatch,
  frontend_stopwatch: time.Stopwatch,
  individual_stopwatch: time.Stopwatch,
  io_stopwatch: time.Stopwatch,

  execution_time: f64,

  frontend_time: f64,
  parser_time: f64,
  parser_io_time: f64,
  resolver_time: f64,
  generator_time: f64,

  llvm_time: f64,
  link_time: f64,

  processed_lines: uint,
}

/**
* Contains all data required by the compiler.
*/
internal struct Compiler {
  arguments: Compilation_Arguments,         // Holds the arguments that are used for compilation.

  packages: map[string]*Package,            // Contains all imported packages.
  package_search_paths: map[string]string,  // Maps package sources (like 'std') to their corresponding absolute search path.
  current_package: *Package,                // Holds the currently active package when resolving.
  runtime_package: *Package,                // Holds the special 'runtime' package.

  parsing_threads: [dynamic]*thread.Thread, // Holds all parsing threads.
  file_queue: [dynamic]Queued_File,         // Holds the queue for files to parse.
  file_queue_index: int,                    // Holds the current index into the file queue.
  file_lock: thread.Mutex,                  // Holds the lock to synchronize access to the file queue.
  package_lock: thread.Mutex,               // Holds the lock to synchronize access to the currently parsed package.
  finished_files_count: int,                // Holds the number of files which have finished parsing.
  parsing_threads_should_terminate: bool,   // Whether or not the parsing threads should terminate. 
  terminate_lock: thread.Mutex,             // Holds the lock to synchronize access to the should terminate flag.
  
  libraries_to_link: [dynamic]string,       // Holds all externally imported libraries.

  profiler: Profiler,                       // Holds the profiler for keeping track of stats.
}

/**
* Represents a queued file for parsing by a thread.
*/
internal struct Queued_File {
  package: *Package, // The package the file belongs to.
  file_path: string, // The path to the file.
}

#expand_context(compiler, *Compiler)
#expand_context(storage, *Type_Storage)
#expand_context(resolver, *Resolver)

/**
* The major version of the compiler
*/ 
const NOX_VERSION_MAJOR := 1;
/**
* The minor version of the compiler
*/ 
const NOX_VERSION_MINOR := 0;
/**
* The patch version of the compiler
*/ 
const NOX_VERSION_PATCH := 0;

/**
* Main entry point for the compiler.
*/
internal proc nox_main() {
  #if (NOX_OS == .Windows) {
    windows.SetConsoleOutputCP(windows.CP_UTF8);
  }

  compiler: Compiler;
  defer compiler_destroy(&compiler);

  new_context := *context;
  new_context.compiler = &compiler;
  push_context (new_context) {
    nox_main_internal();
  }
}

/**
* Internal main entry point for the compiler.
*/
private proc nox_main_internal() {
  compiler := context.compiler;

  nox_print_header();
  
  nox_parse_arguments();

  // We map the path to the standard library to the 'std' package source.
  exe_directory := system.get_exe_directory();
  system_packages_search_path := strings.concatenate({exe_directory, "nox-lib", system.PATH_SEPERATOR});
  map_set(&compiler.package_search_paths, "std", system_packages_search_path);
  defer string_destroy(exe_directory);
  
  // The current directory gets mapped to the empty package source.
  current_directory := system.get_current_directory();
  map_set(&compiler.package_search_paths, "", current_directory);

  if (compiler.arguments.run_tests) {
    compiler.arguments.name = "nox-test";
  } else {
    #if (NOX_DEBUG) {
      if (length(compiler.arguments.name) == 0) {
        compiler.arguments.name = "nox-sandbox";
      }
    }
    if (compiler.arguments.name == "") {
      nox_print_info();
    }
  }
  import_path := compiler.arguments.name;
  
  is_compiling_single_file := false;
  if (io.has_extension(import_path, ".nox")) {
    is_compiling_single_file = true;
    if (!io.file_exists(import_path)) {
      report_error_fatal_simple("The file '%v' does not exist", import_path);
    }
  }

  if (!is_compiling_single_file) {
    absolute_package_path, path_success := package_find_absolute_path(import_path);
    defer string_destroy(absolute_package_path);
    if (!path_success) {
      report_error_fatal_simple("The name '%' is not a Nox package", import_path);
    }
  }

  lexer_init_keywords();
  defer lexer_destroy_keywords();
  storage := type_storage_make();
  defer type_storage_destroy(storage);
  resolver := resolver_make();
  defer resolver_destroy(resolver);

  package_initialize_parsing_threads();

  new_context := *context;
  new_context.storage = storage;
  new_context.resolver = resolver;
  push_context (new_context) {
    compiler.profiler.global_stopwatch.start();
    compiler.profiler.frontend_stopwatch.start();
    compiler.profiler.individual_stopwatch.start();

    package_import("std:runtime");
    assert(compiler.runtime_package != null);

    main_package := is_compiling_single_file ? package_import_single_file(import_path) : package_import(import_path);
    if (main_package == null) {
      report_error_fatal_simple("Failed to compile package at path: %", import_path);
    }

    compiler.profiler.individual_stopwatch.stop();
    compiler.profiler.parser_time = compiler.profiler.individual_stopwatch.get_seconds();
    compiler.profiler.individual_stopwatch.reset();
    compiler.profiler.individual_stopwatch.start();

    package_shutdown_parsing_threads();

    main_symbol := nox_get_main_symbol(main_package);
    resolver.resolve_symbol(main_symbol);
    nox_check_main_symbol(main_symbol);

    resolver.resolve();

    compiler.profiler.individual_stopwatch.stop();
    compiler.profiler.resolver_time = compiler.profiler.individual_stopwatch.get_seconds();
    compiler.profiler.individual_stopwatch.reset();
    compiler.profiler.individual_stopwatch.start();

    generator := generator_make();
    defer generator_destroy(generator);

    generation_arguments: Generation_Arguments;
    generation_arguments.resolver_output = resolver.output;
    generation_arguments.main_symbol = main_symbol;
    generation_arguments.compilation_arguments = compiler.arguments;
    generation_arguments.libraries_to_link = compiler.libraries_to_link[:];
    generator.generate(generation_arguments);

    compiler.profiler.global_stopwatch.stop();
    compiler.profiler.execution_time = compiler.profiler.global_stopwatch.get_seconds();

    nox_log_verbose("Processed lines (including blanks and comments): %", compiler.profiler.processed_lines);
    nox_log_verbose("Execution time: %s (100%%)", compiler.profiler.execution_time);
    nox_log_verbose("      Frontend: %s (%v%%)", compiler.profiler.frontend_time, (compiler.profiler.frontend_time / compiler.profiler.execution_time) * 100);
    if (compiler.arguments.verbose_more_timings) {
      nox_log_verbose("   -    Parser: %s (%v%%)", compiler.profiler.parser_time, (compiler.profiler.parser_time / compiler.profiler.execution_time) * 100);
      nox_log_verbose("   -  Resolver: %s (%v%%)", compiler.profiler.resolver_time, (compiler.profiler.resolver_time / compiler.profiler.execution_time) * 100);
      nox_log_verbose("   - Generator: %s (%v%%)", compiler.profiler.generator_time, (compiler.profiler.generator_time / compiler.profiler.execution_time) * 100);
    }
    nox_log_verbose("          LLVM: %s (%v%%)", compiler.profiler.llvm_time, (compiler.profiler.llvm_time / compiler.profiler.execution_time) * 100);
    nox_log_verbose("        Linker: %s (%v%%)", compiler.profiler.link_time, (compiler.profiler.link_time / compiler.profiler.execution_time) * 100);

    if (compiler.arguments.run_tests) {
      #if (NOX_OS == .Windows) {
        system.run("test.exe");
        if (!compiler.arguments.keep_intermediate) {
          io.remove_file("test.exe");
          io.remove_file("test.pdb");
        }
      } else {
        system.run("./test");
        if (!compiler.arguments.keep_intermediate) {
          io.remove_file("test");
        }
      }
    }
  }
}

/**
* Parses the command line arguments into the compilation arguments.
*/
private proc nox_parse_arguments() {
  compiler := context.compiler;

  arguments: Compilation_Arguments;
  
  arguments.output_name = "out";
  #if (NOX_DEBUG) {
    arguments.generate_llvm_ir = true;
    arguments.build_debug = true;
    arguments.verbose = true;
  }

  is_name_set := false;

  foreach (main_arg in main_args) {
    argument := strings.cstring_to_string(main_arg);
    
    if (argument == "-o-1") {
      arguments.optimization_level = -1;
    } else if (argument == "-o0") {
      arguments.optimization_level = 0;
    } else if (argument == "-o1") {
      arguments.optimization_level = 1;
    } else if (argument == "-o2") {
      arguments.optimization_level = 2;
    } else if (argument == "-o3") {
      arguments.optimization_level = 3;
    } else if (argument == "-generate-llvm-ir") {
      arguments.generate_llvm_ir = true;
    } else if (argument == "-keep-intermediate") {
      arguments.keep_intermediate = true;
    } else if (argument == "-debug") {
      arguments.build_debug = true;
    } else if (argument == "-disable-rttr") {
      arguments.rttr_disabled = true;
    } else if (argument == "-disable-assert") {
      arguments.assert_disabled = true;
    } else if (argument == "-verbose") {
      arguments.verbose = true;
    } else if (argument == "-verbose-more-timings") {
      arguments.verbose_more_timings = true;
    } else if (argument == "-test") {
      arguments.run_tests = true;
    } else {
      colon_index := strings.first_index_of(argument, ":");

      prefix_out := "-out:";
      prefix_extra := "-extra-linker-flags:";
      prefix_source := "-package-source:";

      if (colon_index > 0) {
        actual_argument := argument[:colon_index + 1];
        if (actual_argument == prefix_out) {
          arguments.output_name = argument[length(prefix_out):];
          if (length(arguments.output_name) == 0) {
            report_error_fatal_simple("No output name provided in 'out' argument");
          }
        } else if (actual_argument == prefix_extra) {
          arguments.extra_linker_flags = argument[length(prefix_extra):];
        } else if (actual_argument == prefix_source) {
          package_source := argument[length(prefix_source):];
          equal_index := strings.first_index_of(package_source, "=");
          if (equal_index < 0) {
            report_error_fatal_simple("Missing package source path after: '%v'", package_source);
          }
          package_source_name := package_source[:equal_index];
          if (length(package_source_name) == 0) {
            report_error_fatal_simple("Empty name for package source");
          }
          package_source_path := package_source[equal_index + 1:];
          if (length(package_source_path) == 0) {
            report_error_fatal_simple("Empty path for package source '%v'", package_source_name);
          }
          map_set(&compiler.package_search_paths, package_source_name, strings.clone(package_source_path));
        } else {
          report_error_fatal_simple("Unknown argument: %", actual_argument);
        }
      } else {
        dash_index := strings.first_index_of(argument, "-");
        if (dash_index == 0) {
          report_error_fatal_simple("Unknown argument: %", argument[1:]);
        }

        if (is_name_set) {
          report_warning_simple("Package name already provided. Name '%' ignored.", argument);
        } else {
          is_name_set = true;
          arguments.name = argument;
        }
      }
    }
  }

  if (arguments.run_tests) {
    arguments.optimization_level = -1;
    arguments.output_name = "test";
  }

  compiler.arguments = arguments;
}

/**
* Prints the Nox Compiler information to the console.
*/
private proc nox_print_info() {
  format.printf("Usage:\n");
  format.printf("         noxb [arguments] package\n");
  format.printf("         noxb [arguments] file\n");
  format.printf("Arguments:\n");
  format.printf("         -debug                        Generate debug information.\n");
  format.printf("         -disable-assert               Disable all calls to 'assert'. Sets the 'NOX_ASSERT_DISABLED' constant to 'true'.\n");
  format.printf("         -disable-rttr                 Disable support for RTTR. Sets the 'NOX_RTTR_DISABLED' constant to 'true'.\n");
  format.printf("         -extra-linker-flags:[string]  Pass 'string' as additional flags and commands to the linker.\n");
  format.printf("         -generate-llvm-ir             Additionally generate the intermediate LLVM IR as an .ll file.\n");
  format.printf("         -keep-intermediate            Keep the intermediate object files.\n");
  format.printf("         -o[n]                         Set the optimization level 'n'. Allowed values are: -1, 0, 1, 2 and 3.\n");
  format.printf("         -out:[name]                   Set 'name' as the output name for the generated executable.\n");
  format.printf("         -package-source:[name]=[path] Set 'name' as a package source for 'path'. Can be specified multiple times.\n");
  format.printf("         -test                         Execute the compiler tests.\n");
  format.printf("         -verbose                      Print compiler information while running.\n");
  format.printf("         -verbose-more-timings         Print more timings for the frontend.\n");

  libc.exit(0);
}

/**
* Prints the Nox Compiler information header to the console.
*/
private proc nox_print_header() {
  format.printf("Nox Self-Hosted Compiler %.%.%\n", NOX_VERSION_MAJOR, NOX_VERSION_MINOR, NOX_VERSION_PATCH);
}

/**
* Gets the main symbol (proc main()) from a provided package.
* 
* @param package The package to look in.
* @return The main symbol (can be null if not found).
*/
private proc nox_get_main_symbol(packacge: *Package) -> *Symbol {
  main_symbol := package_get_symbol_defined_anywhere_in_package(packacge, "main", .All);
  if (main_symbol == null) {
    report_error_fatal_simple("Missing entry point 'main'");
  }
  return main_symbol;
}

/**
* Checks if a provided main symbol is actually valid.
* 
* @param main_symbol The main symbol to check.
*/
private proc nox_check_main_symbol(main_symbol: *Symbol) -> *Symbol {
  position := main_symbol.declaration.position;

  // This ensures that we can't have multiple 'main' routines in a package.
  if (main_symbol.access_modifier == .Private) {
    report_error_fatal(position, "Entry point 'main' has to be declared 'internal' or 'public'");
  }

  if (main_symbol.kind != .Routine || main_symbol.declaration.kind != .Procedure) {
    report_error_fatal(position, "Entry point 'main' is not a procedure");
  }

  type_routine := cast(*Type_Routine) main_symbol.type;
  if (type_routine.calling_convention != .Nox) {
    report_error_fatal(position, "Entry point 'main' has to have calling convention 'nox'");
  }

  if (length(type_routine.parameters) != 0) {
    report_error_fatal(position, "Entry point 'main' can't have any parameters");
  }
  if (!type_routine.return_type.is_void()) {
    report_error_fatal(position, "Entry point 'main' can't have a return type");
  }

  if (has_flag(main_symbol.flags, .Routine_Disabled)) {
    report_error_fatal(position, "Entry point 'main' can't be disabled");
  }

  return main_symbol;
}

/**
* Destroys all resources of the provided compiler.
* 
* @param compiler The compiler to destroy.
*/ 
private proc compiler_destroy(compiler: *Compiler) {
  foreach (_, package in compiler.packages) {
    package_destroy(package);
  }
  map_destroy(&compiler.packages);

  foreach (_, search_path in compiler.package_search_paths) {
    string_destroy(search_path);
  }
  map_destroy(&compiler.package_search_paths);

  foreach (library_to_link in compiler.libraries_to_link) {
    string_destroy(library_to_link);
  }
  array_destroy(&compiler.libraries_to_link);
}

/**
* Logs verbose info to the console.
*
* @param fmt  The format of the string.
* @param args The arguments of the formatted string.
*/
internal proc nox_log_verbose(fmt: string, params args: []any) {
  if (!context.compiler.arguments.verbose) {
    return;
  }
  format.printf(fmt, args);
  format.print("\n");
}
