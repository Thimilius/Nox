import "std:libc"
import "std:memory"
import "std:strings"

implement Generator {

  /**
  * Enters a LLVM block.
  * 
  * @param routine_context The context of the routine.
  * @param block           The LLVM block to enter.
  * @return The previous LLVM block.
  */
  internal proc enter_llvm_block(routine_context: *Routine_Context, current_block: LLVMBasicBlockRef) -> LLVMBasicBlockRef {
    previous_block := routine_context.current_block;
    LLVMPositionBuilderAtEnd(self.builder, current_block);
    routine_context.current_block = current_block;
    return previous_block;
  }

  /**
  * Leaves the current LLVM block.
  * 
  * @param routine_context The context of the routine.
  * @param previous_block  The previous block that gets entered when leaving.
  */
  internal proc leave_llvm_block(routine_context: *Routine_Context, previous_block: LLVMBasicBlockRef) {
    routine_context.current_block = previous_block;
  }

  /**
  * Appends a block to a routine.
  * 
  * @param routine_context The context of the routine.
  * @return The appended LLVM block.
  */
  internal proc append_block(routine_context: *Routine_Context) -> LLVMBasicBlockRef {
    block_name := to_cstring_f("block_%", routine_context.block_counter);
    routine_context.block_counter += 1;
    assert(routine_context.llvm_symbol != null);
    return LLVMAppendBasicBlock(routine_context.llvm_symbol, block_name);
  }

  /**
  * Enters a local scope.
  * 
  * @param routine_context The context of the routine.
  * @param kind            The kind of the local scope.
  * @param position        The position of the local scope.
  */
  internal proc enter_local_scope(routine_context: *Routine_Context, kind: Routine_Local_Scope_Kind, position: Source_Position) {
    scope := routine_context.local_scope;
    
    local_scope := memory.new!(Routine_Local_Scope)();
    local_scope.kind = kind;
    local_scope.parent = scope;
    routine_context.local_scope = local_scope;

    self.debug_enter_local_scope(routine_context, scope, position);
  }

  /**
  * Leaves a local scope.
  * 
  * @param routine_context The context of the routine.
  * @param returns         Does the scope return?
  * @param leaves          Does the scope leave?
  */
  internal proc leave_local_scope(routine_context: *Routine_Context, returns: bool, leaves: bool) {
    if (!returns && !leaves) {
      self.emit_deferred_statements_local(routine_context);
    }

    scope := routine_context.local_scope;
    if (scope != null) {
      routine_context.local_scope = scope.parent;
      map_destroy(&scope.symbols);
      array_destroy(&scope.deferred_statements);
      memory.free(scope);
    } else {
      routine_context.local_scope = null;
    }
  }

  /**
  * Enters a specified locaing mode.
  * 
  * @param routine_context The context of the routine.
  * @param loading_mode    The loading mode to enter.
  * @return The previous loading mode.
  */
  internal proc enter_loading_mode(routine_context: *Routine_Context, loading_mode: Loading_Mode) -> Loading_Mode {
    previous_loading_mode := routine_context.current_loading_mode;
    routine_context.current_loading_mode = loading_mode;
    return previous_loading_mode;
  }

  /**
  * Enters a specified locaing mode.
  * 
  * @param routine_context       The context of the routine.
  * @param previous_loading_mode The previous loading mode that gets entered when leaving.
  */
  internal proc leave_loading_mode(routine_context: *Routine_Context, previous_loading_mode: Loading_Mode) {
    routine_context.current_loading_mode = previous_loading_mode;
  }

  /**
  * Adds a local symbol to the given scope.
  * 
  * @param name         The name of the symbol.
  * @param llvm_symbol  The symbol to add.
  * @param llvm_type    The LLVM type of the symbol.
  * @param type         The type of the symbol
  * @param is_parameter Is the symbol a parameter?
  * @param scope        The scope to add the symbol to.
  */
  internal proc add_local_symbol(name: string, llvm_symbol: LLVMValueRef, llvm_type: LLVMTypeRef, type: *Type, is_parameter: bool, scope: *Routine_Local_Scope) {
    map_set(&scope.symbols, name, {llvm_symbol, llvm_type, type, is_parameter});
  }

  /**
  * Gets the local symbol for a given name.
  * 
  * @param routine_context The context of the routine.
  * @param name            The name of the local symbol to get.
  * @return 1. The local symbol; 2. True if the symbol was found otherwise false.
  */
  internal proc get_local_symbol(routine_context: *Routine_Context, name: string) -> (LLVM_Local_Symbol, bool) {
    return self.get_local_symbol_in_scope_recursive(routine_context.local_scope, name);
  }

  /**
  * Gets the local symbol for a given name and scope recursively.
  * 
  * @param scope The scope to recursively look in.
  * @param name  The name of the local symbol to get.
  * @return 1. The local symbol; 2. True if the symbol was found otherwise false.
  */
  internal proc get_local_symbol_in_scope_recursive(scope: *Routine_Local_Scope, name: string) -> (LLVM_Local_Symbol, bool) {
    if (scope == null) {
      return {{}, false};
    }

    symbol, found := map_get(&scope.symbols, name);
    if (found) {
      return {symbol, true};
    }

    return self.get_local_symbol_in_scope_recursive(scope.parent, name);
  }

  /**
  * Gets the resolved symbol for a key.
  * 
  * @param generator The reference to the generator.
  * @parma key       The key to look up.
  * @return The resolved symbol.
  */
  internal proc get_resolved_symbol(key: *Expression) -> *Symbol {
    // We don't assert here as we are relying on the symbol not always being found.
    symbol, _ := map_get(&self.resolver_output.resolved_symbols, key);
    return symbol;
  }

  /**
  * Gets the resolved type for a key.
  * 
  * @param generator The reference to the generator.
  * @parma key       The key to look up.
  * @return The resolved type.
  */
  internal proc get_resolved_type(key: rawptr) -> *Type {
    resolved_type, found :=  map_get(&self.resolver_output.resolved_types, key);
    assert(found);

    return resolved_type;
  }

  /**
  * Gets the resolved overwrite type for a key.
  * 
  * @param generator The reference to the generator.
  * @parma key       The key to look up.
  * @return The resolved overwrite type.
  */
  internal proc get_resolved_overwrite_type(key: *Expression) -> *Type {
    overwrite_type, _ := map_get(&self.resolver_output.resolved_overwrite_types, key);
    return overwrite_type;
  }

  /**
  * Gets the resolved constant for a key.
  * 
  * @param generator The reference to the generator.
  * @parma key       The key to look up.
  * @return The resolved constant.
  */
  internal proc get_resolved_constant(key: *Expression) -> (Operand, bool) {
    // We don't assert here as we are relying on the constant not always being found.
    return map_get(&self.resolver_output.resolved_constants, key);
  }

  /**
  * Gets the resolved member for a key.
  * 
  * @param generator The reference to the generator.
  * @parma key       The key to look up.
  * @return The resolved member.
  */
  internal proc get_resolved_member(key: *Expression) -> Resolved_Member {
    resolved_index, found :=  map_get(&self.resolver_output.resolved_members, key);
    assert(found);

    return resolved_index;
  }

  /**
  * Gets the resolved compound field for a key.
  * 
  * @param generator The reference to the generator.
  * @parma key       The key to look up.
  * @return The resolved compound field.
  */
  internal proc get_resolved_compound_field(key: *Expression) -> Resolved_Compound_Field {
    resolved_index, found := map_get(&self.resolver_output.resolved_compound_fields, key);
    assert(found);

    return resolved_index;
  }

  /**
  * Gets the LLVM representation for a symbol.
  * 
  * @param generator The reference to the generator.
  * @parma symbol    The symbol to get the LLVM representation of.
  * @return The LLVM representation of the symbol.
  */
  internal proc symbol_to_llvm(symbol: *Symbol) -> LLVMValueRef {
    llvm_symbol, found := map_get(&self.llvm_symbols, symbol);
    assert(found);
    return llvm_symbol;
  }

  /**
  * Gets the LLVM representation for a constant.
  * 
  * @param generator The reference to the generator.
  * @parma value     The value of the constant.
  * @parma type      The type of the constant.
  * @return The LLVM representation of the constant.
  */
  internal proc constant_to_llvm(value: Value, type: *Type) -> LLVMValueRef {
    type := type.unqualify();
    if (type.is_enumeration()) {
      type = type.base;
    }
    llvm_type := self.type_to_llvm(type);

    switch (type.kind) {
      case .B8:   return LLVMConstInt(llvm_type, cast(u64) value.(b8), false);
      case .B16:  return LLVMConstInt(llvm_type, cast(u64) value.(b16), false);
      case .B32:  return LLVMConstInt(llvm_type, cast(u64) value.(b32), false);
      case .B64:  return LLVMConstInt(llvm_type, cast(u64) value.(b64), false);
      case .Bool: return LLVMConstInt(llvm_type, cast(u64) value.(bool), false);
      case .I8:   return LLVMConstInt(llvm_type, cast(u64) value.(i8), false);
      case .I16:  return LLVMConstInt(llvm_type, cast(u64) value.(i16), false);
      case .I32:  return LLVMConstInt(llvm_type, cast(u64) value.(i32), false);
      case .I64, .Untyped_Integer: return LLVMConstInt(llvm_type, cast(u64) value.(i64), false);
      case .Int: return LLVMConstInt(llvm_type, cast(u64) value.(int), false);
      case .U8:  return LLVMConstInt(llvm_type, cast(u64) value.(u8), false);
      case .U16: return LLVMConstInt(llvm_type, cast(u64) value.(u16), false);
      case .U32: return LLVMConstInt(llvm_type, cast(u64) value.(u32), false);
      case .U64: return LLVMConstInt(llvm_type, cast(u64) value.(u64), false);
      case .UInt: return LLVMConstInt(llvm_type, cast(u64) value.(uint), false);

      case .F32: return LLVMConstReal(llvm_type, cast(f64) value.(f32));
      case .F64, .Untyped_Float: return LLVMConstReal(llvm_type, value.(f64));

      case .Char, .Untyped_Char: return LLVMConstInt(llvm_type, cast(u64) value.(char), false);

      case .Untyped_String, .CString, .String: {
        return value == null ? LLVMConstNull(llvm_type) : self.string_to_llvm(value.(string), type.kind == .CString);
      } 
      
      case .Rawptr, .Pointer, .Offset_Relative_Pointer, .Dynamic_Pointer: fallthrough;
      case .Array, .Slice, .Struct, .Union, .Procedure, .Function, .Untyped_Null: { 
        return LLVMConstNull(llvm_type);
      }

      // Constants for self-relative pointers are special as we actually want the pointer 'null' and not '0' for the relative base.
      case .Self_Relative_Pointer: return LLVMConstNull(LLVMPointerType(LLVMVoidType(), 0));
    }

    assert(false);
    return null;
  }

  /**
  * Gets the LLVM representation for a string.
  * 
  * @param generator    The reference to the generator.
  * @parma string_value The string value.
  * @parma is_cstring   Is the string a cstring?
  * @return The LLVM representation of the string.
  */
  internal proc string_to_llvm(string_value: string, is_cstring: bool) -> LLVMValueRef {
    // We only ever want to emit a string a single time and reuse it.
    llvm_string_pointer, found_string := map_get(&self.llvm_strings, string_value);
    if (!found_string) {
      // We guarantee that all constant strings (or rather their data buffers) are going to be null-terminated.
      cstring_value := strings.clone_to_cstring(string_value, context.temporary_allocator);
      llvm_string_pointer = LLVMBuildGlobalStringPtr(self.builder, cstring_value, make_string_name(self));
      map_set(&self.llvm_strings, string_value, llvm_string_pointer);
    }

    if (is_cstring) {
      return llvm_string_pointer;
    } else {
      llvm_string_element_values: []LLVMValueRef = {llvm_string_pointer, LLVMConstInt(LLVMInt64Type(), cast(u64) length(string_value), false)};
      llvm_string_type := self.type_to_llvm(context.storage.type_string);
      return LLVMConstNamedStruct(llvm_string_type, data(llvm_string_element_values), cast(u32) length(llvm_string_element_values));
    }
  }

  /**
  * Resolves the LLVM representation for a name.
  * 
  * @param generator       The reference to the generator.
  * @parma routine_context The context of the routine.
  * @parma expression      The expression of the name.
  * @parma name            The name to resolved.
  * @return 1. The LLVM value of the resolved name; 2. The LLVM type of the resolved name.
  */
  internal proc name_to_llvm(routine_context: *Routine_Context, expression: *Expression, name: string) -> (LLVMValueRef, LLVMTypeRef) {
    // First we look up the name as a local symbol.
    llvm_local, found_local := self.get_local_symbol(routine_context, name);
    if (found_local) {
      return {llvm_local.llvm_value, llvm_local.llvm_type};
    }

    // Look for a globally declared symbol.
    symbol := self.get_resolved_symbol(expression);

    return {self.symbol_to_llvm(symbol), self.type_to_llvm(symbol.type)};
  }

  /**
  * Gets the default initializer value for a type.
  * 
  * @param generator The reference to the generator.
  * @param type      The type to get the default initializer for.
  * @return The default initializer value for the type.
  */
  internal proc default_initializer_value(type: *Type) -> LLVMValueRef {
    llvm_type := self.type_to_llvm(type);
    return LLVMConstNull(llvm_type);
  }

  /**
  * Creates a LLVM enum attribute.
  * 
  * @param name  The name of the LLVM enum attribute.
  * @param value The value of the LLVM enum attribute.
  * @return The LLVM enum attribute.
  */
  internal proc create_llvm_enum_attribute(name: cstring, value: u64 = 0) -> LLVMAttributeRef {
    kind := LLVMGetEnumAttributeKindForName(name, cast(u64) libc.strlen(name));
    return LLVMCreateEnumAttribute(LLVMGetGlobalContext(), kind, value);
  }

  /**
  * Creates a LLVM enum attribute type.
  * 
  * @param name      The name of the LLVM enum attribute type.
  * @param llvm_type The LLVM type of the LLVM enum attribute type.
  * @return The LLVM enum attribute type.
  */
  internal proc create_llvm_enum_attribute_type(name: cstring, llvm_type: LLVMTypeRef) -> LLVMAttributeRef {
    kind := LLVMGetEnumAttributeKindForName(name, cast(u64) libc.strlen(name));
    return LLVMCreateTypeAttribute(LLVMGetGlobalContext(), kind, llvm_type);
  }

  /**
  * Checks whether or not an expression accesses an SoA or AoSoA collection.
  * 
  * @param generator         The reference to the generator.
  * @param member_expression The member expression to check.
  * @return True if the expression is accesses an SoA or AoSoA collection.
  */
  internal proc member_is_soa_or_aosoa_access(member_expression: *Expression) -> bool {
    if (member_expression.kind == .Index) {
      member_expression := cast(*Expression_Index) member_expression;
      index_type := self.get_resolved_type(cast(*Expression) member_expression.expression);
      if (index_type.is_absolute_pointer() || index_type.is_self_relative_pointer()) {
        index_type = index_type.base;
      }
      return index_type.is_soa_or_aosoa();
    } else {
      return false;
    }
  }

  /**
  * Get the hash function for a type.
  * 
  * @param generator The reference to the generator.
  * @param type      The type to get the hash function for.
  * @return The LLVM hash routine. 
  */
  internal proc get_hash_function_for_type(type: *Type) -> LLVM_Routine_Tuple {
    // First we try to get a hasher that might already be present.
    // Pointer types are all treated as a 'rawptr'.
    type := type;
    is_pointer_like := type.is_absolute_pointer_like() || type.is_cstring();
    if (is_pointer_like) {
      type = context.storage.type_rawptr;
    }

    hasher, found := map_get(&self.llvm_hasher_functions, type);
    if (found) {
      return {hasher.llvm_symbol, hasher.llvm_type};
    }

    // We have to remember to take into account that some types are actually passed as pointers.
    llvm_type := self.type_to_llvm(type);
    llvm_hasher_parameter_types: []LLVMTypeRef = {self.type_is_passed_as_pointer(type) ? LLVMPointerType(LLVMVoidType(), 0) : llvm_type};
    llvm_hasher, llvm_hasher_type := self.emit_temporary_routine(to_cstring_f("runtime.hash_%", type.name), LLVMInt64Type(), llvm_hasher_parameter_types);

    builder := self.temporary_builder;
    routine_context: Routine_Context;
    routine_context.llvm_symbol = llvm_hasher;
    routine_context.declaration_block = self.append_block(&routine_context);
    LLVMPositionBuilderAtEnd(builder, routine_context.declaration_block);

    builtin_routine_hash_data := self.llvm_builtin_routines[Builtin_Routine.Hash_Data];

    is_scalar := type.is_scalar();
    is_string := type.is_string();
    is_any := type.is_any();
    is_offset_relative_pointer := type.is_offset_relative_pointer();
    is_dynamic_pointer := type.is_dynamic_pointer();

    llvm_return_hash: LLVMValueRef;
    if (is_pointer_like || is_scalar || is_string || is_any || is_offset_relative_pointer || is_dynamic_pointer) {
      llvm_args: []LLVMValueRef;
      if (is_pointer_like || is_scalar || is_offset_relative_pointer) {
        llvm_temp := LLVMBuildAlloca(builder, llvm_type, make_temp_name(&routine_context));
        LLVMBuildStore(builder, LLVMGetParam(llvm_hasher, 0), llvm_temp);
        llvm_args = {llvm_temp, LLVMConstInt(LLVMInt64Type(), cast(u64) type.get_size(), false)};
      } else if (is_string) {
        llvm_data_pointer := self.emit_gep_value_data(builder, &routine_context, llvm_type, LLVMGetParam(llvm_hasher, 0));
        llvm_data_pointer = LLVMBuildLoad2(builder, self.type_to_llvm(context.storage.type_rawptr), llvm_data_pointer, make_value_name(&routine_context));
        llvm_length_pointer := self.emit_gep_value_length(builder, &routine_context, llvm_type, LLVMGetParam(llvm_hasher, 0));
        llvm_length_pointer = LLVMBuildLoad2(builder, self.type_to_llvm(context.storage.type_int), llvm_length_pointer, make_value_name(&routine_context));
        llvm_args = {llvm_data_pointer, llvm_length_pointer};
      } else {
        assert(is_any || is_dynamic_pointer);
        llvm_args = {LLVMGetParam(llvm_hasher, 0), LLVMConstInt(LLVMInt64Type(), cast(u64) type.get_size(), false)};
      }
      
      llvm_return_hash = LLVMBuildCall2(
        builder,
        builtin_routine_hash_data.llvm_tuple.llvm_type,
        builtin_routine_hash_data.llvm_tuple.llvm_symbol,
        data(llvm_args),
        cast(u32) length(llvm_args),
        make_value_name(&routine_context),
      );
    } else {
      assert(type.is_struct());

      type_struct := cast(*Type_Struct) type;
      
      FNV_OFFSET_BASIS: u64 = 0xcbf29ce484222325;
      llvm_return_hash = LLVMConstInt(LLVMInt64Type(), FNV_OFFSET_BASIS, false);
      FNV_PRIME: u64 = 0x100000001b3;
      llvm_fnv_prime := LLVMConstInt(LLVMInt64Type(), FNV_PRIME, false);

      llvm_struct := LLVMGetParam(llvm_hasher, 0);
      foreach (field, field_index in type_struct.fields) {
        field_type := field.type;

        llvm_field_pointer := self.emit_gep_field(builder, &routine_context, llvm_type, llvm_struct, field_index);
        llvm_field_hasher_argument := llvm_field_pointer;
        if (!self.type_is_passed_as_pointer(field_type)) {
          llvm_field_type := self.type_to_llvm(field_type);
          llvm_field_hasher_argument = LLVMBuildLoad2(builder, llvm_field_type, llvm_field_pointer, make_value_name(&routine_context));
        }

        llvm_field_hasher := self.get_hash_function_for_type(field_type);
        // We have to reset the builder here because it might have been used when getting the hasher for the field.
        LLVMPositionBuilderAtEnd(builder, routine_context.declaration_block);

        llvm_field_hasher_arguments: []LLVMValueRef = {llvm_field_hasher_argument};
        llvm_field_hash := LLVMBuildCall2(
          builder,
          llvm_field_hasher.llvm_type,
          llvm_field_hasher.llvm_symbol,
          data(llvm_field_hasher_arguments),
          cast(u32) length(llvm_field_hasher_arguments),
          make_value_name(&routine_context),
        );
        llvm_return_hash = LLVMBuildXor(builder, llvm_return_hash, llvm_field_hash, make_value_name(&routine_context));
        llvm_return_hash = LLVMBuildMul(builder, llvm_return_hash, llvm_fnv_prime, make_value_name(&routine_context));
      }
    }
    LLVMBuildRet(builder, llvm_return_hash);

    hasher_routine_tuple := LLVM_Routine_Tuple{llvm_hasher, llvm_hasher_type};
    map_set(&self.llvm_hasher_functions, type, hasher_routine_tuple);
    return hasher_routine_tuple;
  }

  /**
  * Get the comparer function for a type.
  * 
  * @param generator The reference to the generator.
  * @param type      The type to get the comparer function for.
  * @return The LLVM comparer routine. 
  */
  internal proc get_compare_function_for_type(type: *Type) -> LLVM_Routine_Tuple {
    type := type;
    type_is_pointer_like := type.is_absolute_pointer_like() || type.is_cstring();
    if (type_is_pointer_like) {
      type = context.storage.type_rawptr;
    }

    comparer, found := map_get(&self.llvm_comparer_functions, type);
    if (found) {
      return {comparer.llvm_symbol, comparer.llvm_type};
    }

    llvm_comparer: LLVMValueRef;
    llvm_comparer_type: LLVMTypeRef;

    if (type.is_string() || type.is_cstring()) {
      llvm_builtin_routine := self.llvm_builtin_routines[type.is_string() ? Builtin_Routine.Compare_String : Builtin_Routine.Compare_CString];
      comparer_routine_tuple := LLVM_Routine_Tuple{llvm_builtin_routine.llvm_tuple.llvm_symbol, llvm_builtin_routine.llvm_tuple.llvm_type};
      map_set(&self.llvm_comparer_functions, type, comparer_routine_tuple);
      return comparer_routine_tuple;
    }

    llvm_type := self.type_to_llvm(type);
    llvm_parameter_type := self.type_is_passed_as_pointer(type) ? LLVMPointerType(LLVMVoidType(), 0) : llvm_type;
    llvm_comparer_parameter_types: []LLVMTypeRef = {llvm_parameter_type, llvm_parameter_type};
    llvm_comparer, llvm_comparer_type = self.emit_temporary_routine(to_cstring_f("runtime.compare_%", type.name), LLVMInt1Type(), llvm_comparer_parameter_types);

    builder := self.temporary_builder;
    routine_context: Routine_Context;
    routine_context.llvm_symbol = llvm_comparer;

    if (type_is_pointer_like || type.is_scalar() || type.is_any() || type.is_offset_relative_pointer() || type.is_dynamic_pointer()) {
      llvm_block := self.append_block(&routine_context);
      LLVMPositionBuilderAtEnd(builder, llvm_block);
      llvm_return_comparison: LLVMValueRef;
      if (type.is_float()) {
        llvm_return_comparison = LLVMBuildFCmp(builder, .UEQ, LLVMGetParam(llvm_comparer, 0), LLVMGetParam(llvm_comparer, 1), make_value_name(&routine_context));
      } else if (type.is_any() || type.is_dynamic_pointer()) {
        llvm_data_a := self.emit_gep_value_data(builder, &routine_context, llvm_type, LLVMGetParam(llvm_comparer, 0));
        llvm_data_a = LLVMBuildLoad2(builder, LLVMPointerType(LLVMVoidType(), 0), llvm_data_a, make_value_name(&routine_context));
        llvm_data_b := self.emit_gep_value_data(builder, &routine_context, llvm_type, LLVMGetParam(llvm_comparer, 1));
        llvm_data_b = LLVMBuildLoad2(builder, LLVMPointerType(LLVMVoidType(), 0), llvm_data_b, make_value_name(&routine_context));
        llvm_return_comparison = LLVMBuildICmp(builder, .EQ, llvm_data_a, llvm_data_b, make_value_name(&routine_context));
      } else {
        llvm_return_comparison = LLVMBuildICmp(builder, .EQ, LLVMGetParam(llvm_comparer, 0), LLVMGetParam(llvm_comparer, 1), make_value_name(&routine_context));
      }
      LLVMBuildRet(builder, llvm_return_comparison);
    } else {
      assert(type.is_struct());

      type_struct := cast(*Type_Struct) type;
      field_count := length(type_struct.fields);
      llvm_field_blocks := array_make!(LLVMBasicBlockRef)(0, field_count, context.temporary_allocator);
      for (i := 0; i < field_count; i += 1) {
        array_add(&llvm_field_blocks, self.append_block(&routine_context));
      }
      llvm_return_true_block := self.append_block(&routine_context);
      LLVMPositionBuilderAtEnd(builder, llvm_return_true_block);
      LLVMBuildRet(builder, LLVMConstInt(LLVMInt1Type(), 1, false));
      llvm_return_false_block: LLVMBasicBlockRef;
      if (field_count > 0) {
        llvm_return_false_block = self.append_block(&routine_context);
        LLVMPositionBuilderAtEnd(builder, llvm_return_false_block);
        LLVMBuildRet(builder, LLVMConstInt(LLVMInt1Type(), 0, false));
      }

      llvm_struct_a := LLVMGetParam(llvm_comparer, 0);
      llvm_struct_b := LLVMGetParam(llvm_comparer, 1);
      foreach (field, field_index in type_struct.fields) {
        field_type := field.type;

        llvm_field_block := llvm_field_blocks[field_index];
        LLVMPositionBuilderAtEnd(builder, llvm_field_block);
        
        llvm_field_pointer_a := self.emit_gep_field(builder, &routine_context, llvm_type, llvm_struct_a, field_index);
        llvm_field_pointer_b := self.emit_gep_field(builder, &routine_context, llvm_type, llvm_struct_b, field_index);
        llvm_field_comparer_argument_a := llvm_field_pointer_a;
        llvm_field_comparer_argument_b := llvm_field_pointer_b;
        if (!self.type_is_passed_as_pointer(field_type)) {
          llvm_field_type := self.type_to_llvm(field_type);
          llvm_field_comparer_argument_a = LLVMBuildLoad2(builder, llvm_field_type, llvm_field_pointer_a, make_value_name(&routine_context));
          llvm_field_comparer_argument_b = LLVMBuildLoad2(builder, llvm_field_type, llvm_field_pointer_b, make_value_name(&routine_context));
        }

        llvm_field_comparer := self.get_compare_function_for_type(field_type);
        // We have to reset the builder here because it might have been used when getting the comparer for the field.
        LLVMPositionBuilderAtEnd(builder, llvm_field_block);

        llvm_field_comparer_arguments: []LLVMValueRef = {llvm_field_comparer_argument_a, llvm_field_comparer_argument_b};
        llvm_field_comparison_value := LLVMBuildCall2(
          builder,
          llvm_field_comparer.llvm_type,
          llvm_field_comparer.llvm_symbol,
          data(llvm_field_comparer_arguments),
          cast(u32) length(llvm_field_comparer_arguments),
          make_value_name(&routine_context),
        );
        llvm_next_block := field_index + 1 >= field_count ? llvm_return_true_block : llvm_field_blocks[field_index + 1];
        LLVMBuildCondBr(builder, llvm_field_comparison_value, llvm_next_block, llvm_return_false_block);
      }
    }

    comparer_routine_tuple := LLVM_Routine_Tuple{llvm_comparer, llvm_comparer_type};
    map_set(&self.llvm_comparer_functions, type, comparer_routine_tuple);
    return comparer_routine_tuple;
  }

  /**
  * Checks whether or not a relative base of a relative pointer needs conversion.
  *
  * @param relative_base The relative base of the relative pointer to check.
  * @return True if the relative pointer base needs conversion otherwise false.
  */
  internal func relative_pointer_base_needs_conversion(relative_base: *Type) -> bool {
    switch (relative_base.kind) {
      case .I8, .I16, .I32, .U8, .U16, .U32: return true;
    }
    return false;
  }
    
  /**
  * Gets the LLVM representation for a calling convention.
  *
  * @param calling_convention The calling convention to get the LLVM representation of.
  * @return The corresponding LLVM calling convention.
  */
  internal proc calling_convention_to_llvm(calling_convention: Calling_Convention) -> LLVMCallConv {
    switch (calling_convention) {
      case .Nox: return .C;
      case .No_Context: return .C;
      case .C: return .C;
      case .Std_Call: return .X86Stdcall;
      case .Fast_Call: return .X86Fastcall;
      case .Win64: return .Win64;
      case: assert(false); return .C;
    }
  }

}

/**
* Makes a mangled name from a symbol.
*
* @param symbol The symbol to get the mangled name of.
* @return The mangled name.  
*/
internal proc make_mangled_name(symbol: *Symbol) -> cstring {
  result := to_cstring_f("%.%", symbol.package_file.package.name, symbol.name);
  return result;
}

/**
* Makes a mangled name from a type.
*
* @param type   The type to get the mangled name of.
* @param symbol The symbol of the type.
* @return The mangled name.  
*/
internal proc make_mangled_name_from_type(type: *Type, symbol: *Symbol) -> cstring {
  result := to_cstring_f("%.%",  symbol == null ? "" : symbol.package_file.package.name, type.name);
  return result;
}

/**
* Makes a name for a parameter.
*
* @param parameter_index The index of the parameter.
* @return The parameter name.  
*/
internal proc make_parameter_name(parameter_index: int) -> cstring {
  result := to_cstring_f("parameter_%", parameter_index);
  return result;
}

/**
* Makes a name for a value.
*
* @param routine_contex The context of the routine.
* @return The value name.
*/
internal proc make_value_name(routine_context: *Routine_Context) -> cstring {
  result := to_cstring_f("value_%", routine_context.value_counter);
  routine_context.value_counter += 1;
  return result;
}

/**
* Makes a name for a variable.
*
* @param routine_contex The context of the routine.
* @parma name           The name of the variable.
* @return The variable name.
*/
internal proc make_variable_name(routine_context: *Routine_Context, name: string) -> cstring {
  result := to_cstring_f("variable_%_%", routine_context.variable_counter, name);
  routine_context.variable_counter += 1;
  return result;
}

/**
* Makes a name for a temporary.
*
* @param routine_contex The context of the routine.
* @return The temporary name.
*/
internal proc make_temp_name(routine_context: *Routine_Context) -> cstring {
  result := to_cstring_f("temp_%", routine_context.temp_counter);
  routine_context.temp_counter += 1;
  return result;
}

/**
* Makes a name for a byval.
*
* @param routine_contex The context of the routine.
* @return The byval name.
*/
internal proc make_byval_name(routine_context: *Routine_Context) -> cstring {
  result := to_cstring_f("byval_%", routine_context.byval_counter);
  routine_context.byval_counter += 1;
  return result;
}

/**
* Makes a name for a sret.
*
* @param routine_contex The context of the routine.
* @return The sret name.
*/
internal proc make_sret_name(routine_context: *Routine_Context) -> cstring {
  result := to_cstring_f("sret_%", routine_context.sret_counter);
  routine_context.sret_counter += 1;
  return result;
}

/**
* Makes a name for an array.
*
* @param routine_contex The context of the routine.
* @return The array name.
*/
internal proc make_array_name(routine_context: *Routine_Context) -> cstring {
  result := to_cstring_f("array_%", routine_context.array_counter);
  routine_context.array_counter += 1;
  return result;
}

/**
* Makes a name for a slice.
*
* @param routine_contex The context of the routine.
* @return The slice name.
*/
internal proc make_slice_name(routine_context: *Routine_Context) -> cstring {
  result := to_cstring_f("slice_%", routine_context.slice_counter);
  routine_context.slice_counter += 1;
  return result;
}

/**
* Makes a name for a compound.
*
* @param routine_contex The context of the routine.
* @return The compound name.
*/
internal proc make_compound_name(routine_context: *Routine_Context) -> cstring {
  result := to_cstring_f("compound_%", routine_context.compound_counter);
  routine_context.compound_counter += 1;
  return result;
}

/**
* Makes a name for a string.
*
* @param generator The reference to the generator.
* @return The string name.
*/
internal proc make_string_name(generator: *Generator) -> cstring {
  result := to_cstring_f("$string_%", length(generator.llvm_strings));
  return result;
}

/**
* Converts a formatted string to a cstring.
*
* @param format The format of the string.
* @param args   The arguments of the format.
* @return The corresponding cstring.
*/
internal proc to_cstring_f(format: string, params args: []any) -> cstring {
  builder := strings.builder_make(context.temporary_allocator);
  builder.write_format(format, args);
  return to_cstring(builder.to_string());
}

/**
* Converts a string to a cstring.
*
* @param str The string to convert.
* @return The corresponding cstring.
*/
internal proc to_cstring(str: string) -> cstring {
  return strings.clone_to_cstring(str, context.temporary_allocator);
}
